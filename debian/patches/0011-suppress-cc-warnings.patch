Suppress some compiler diagnostics

GCC does helpful static analysis of strncpy() uses and notifies us
about places where we might have missed a terminating null byte.
However, in these cases it is intentionally not copied. Suppress
these false positives so that our build stays warning-free.

--- a/eval.c
+++ b/eval.c
@@ -2398,6 +2398,8 @@
 #endif
   sexp_global(ctx, SEXP_G_ERR_HANDLER)
     = sexp_env_ref(ctx, e, sym=sexp_intern(ctx, "current-exception-handler", -1), SEXP_FALSE);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstringop-truncation"
   /* load init-7.scm */
   len = strlen(sexp_init_file);
   strncpy(init_file, sexp_init_file, len);
@@ -2406,6 +2408,7 @@
   init_file[len + 1 + strlen(sexp_init_file_suffix)] = 0;
   tmp = sexp_load_module_file(ctx, init_file, e);
   sexp_set_parameter(ctx, e, sexp_global(ctx, SEXP_G_INTERACTION_ENV_SYMBOL), e);
+#pragma GCC diagnostic pop
   /* load and bind meta-7.scm env */
 #if SEXP_USE_MODULES
   if (!sexp_exceptionp(tmp)) {
--- a/gc_heap.c
+++ b/gc_heap.c
@@ -621,11 +621,15 @@
   /* since there's no context yet) */
   for (i=0; !fp && i<sizeof(all_paths)/sizeof(all_paths[0]); ++i) {
     for (mod_path=all_paths[i]; *mod_path; mod_path=colon+1) {
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstringop-truncation"
+#pragma GCC diagnostic ignored "-Wstringop-overflow"
       colon = strchr(mod_path, ':');
       end = colon ? colon : mod_path + strlen(mod_path);
       strncpy(path, mod_path, end-mod_path);
       if (end[-1] != '/') path[end-mod_path] = '/';
       strcpy(path + (end-mod_path) + (end[-1] == '/' ? 0 : 1), filename);
+#pragma GCC diagnostic pop
       fp = fopen(path, "rb");
       if (fp || !colon) break;
     }
